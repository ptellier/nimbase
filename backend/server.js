const db  = require('./database/dbConn.js');
const express = require('express');
const check = require('./api/check.js');
const port = 8080;
const app = express();

// root sends welcome message
app.get('/', (req, res) => {
    res.send('Welcome to the Nimbase Back-end API!');
});


app.get('/api', async (req, res) => {
    const collection = db.collection("context");
    const result = await collection.find({}).toArray();
    res.send(result);
});

/****** USER COLLECTION *****************/
/**
 * schema:
 * {
 *   _id: ObjectId,
 *   username: string,
 *   password_hash: string,
 *   email: string,
 *   project_ids: ObjectId[],
 * }
 * note: do not include _id in create new user requests as this is auto-generated by mongodb
 * note: do not project_ids in create new user requests as this starts off empty
 */

// create a new user
// REQUIRES: JSON body matching user schema
// REQUIRES: username is not already taken
// REQUIRES: email is not already taken
app.post('/api/user', express.json(), async (req, res) => {
    if (!check.isNewUser(req.body)) {
        res.status(400).send("invalid user in request body (as json)");
    }
    const users = db.collection("users");

    if (await users.findOne({username: req.body.username})) {
        res.status(400).send("username already taken");
        return;
    }
    if (await users.findOne({email: req.body.email})) {
        res.status(400).send("email already taken");
        return;
    }
    const result = await users.insertOne(req.body);
    res.status(200).send(result);
});

// get all projects of a user
app.get('/api/user/projects', express.json(), async (req, res) => {
    if (!check.isString(req.body.username)) {
        res.status(400).send("need username -> string in request body");
    }
    const users = db.collection("users");
    const result = await users.findOne({username: req.body.username}, {$project_ids: 1, _id: 0});
    if (!result ) {res.status(404).send(result);}
    res.status(200).send(result);
});

//authenticate/login user
app.post('/api/user/login', async (req, res) => {
    // const users = db.collection("users");
    //TODO: check if credential are valid
    //TODO: perform authentication
    res.status(200).send({msg: "todo: implement this"});
});

// TODO: logout user '/api/user/logout'

/****** PROJECT COLLECTION *****************/
/**
 * schema:
 * {
 *   _id: ObjectId,
 *   name: string,
 *   description: string,
 *   dockerfile: string,
 *   github_url: ObjectId[],
 *   github_auth_tokens: string,
 * }
 * note: do not include _id in create new projects requests as this is auto-generated by mongodb
 */

// create a new project
// REQUIRES: JSON body matching project schema
app.post('/api/project', express.json(), async (req, res) => {
    if (!check.isProject(req.body)) {
        res.status(400).send("invalid project in request body (as json)");
    }
    const projects = db.collection("projects");
    const result = await projects.insertOne(req.body);
    res.status(200).send(result);
});

// get an existing project
// REQUIRES: JSON body with project id
app.get('/api/project', express.json(), async (req, res) => {
    if (!check.isString(req.body.id)) {
        res.status(400).send("need id -> string in request body");
    }
    const projects = db.collection("projects");
    const result = await projects.findOne({id: req.body.id});
    if (!result ) {res.status(404).send(result);}
    res.status(200).send(result);
});

// set an existing project's fields (all of them)
// REQUIRES: JSON body with "id" -> id to update, and "project" -> new project matching the project schema
app.put('/api/project', express.json(), async (req, res) => {
    if (!check.isProjectPut(req.body)) {
        res.status(400).send("invalid project \"put\" request schema body (as json)");
    }
    const projects = db.collection("projects");
    const result = await projects.updateOne({_id: req.body.id}, { $set: req.body.project});
    if (!result ) {res.status(404).send(result);}
    res.status(200).send(result);
});

// TODO: perform gitHub action on project '/api/project/deploy'

/****** Listen *****************/

app.listen(port, () => {
    console.log(`Example app listening at http://localhost:${port}`);
});
